/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.stoman.ui;

import com.google.zxing.WriterException;
import com.stoman.dao.ChiTietPhieuDAO;
import com.stoman.dao.DoiTacDAO;
import com.stoman.dao.HangHoaDAO;
import com.stoman.dao.KhoDAO;
import com.stoman.dao.LoaiDoiTacDAO;
import com.stoman.dao.LoaiHangHoaDAO;
import com.stoman.dao.LuuTruDAO;
import com.stoman.dao.PhieuDAO;
import com.stoman.dao.ProcedureDAO;
import com.stoman.entity.ChiTietPhieu;
import com.stoman.entity.DoiTac;
import com.stoman.entity.HangHoa;
import com.stoman.entity.Kho;
import com.stoman.entity.LoaiDoiTac;
import com.stoman.entity.LoaiHangHoa;
import com.stoman.entity.Phieu;
import com.stoman.utils.Auth;
import com.stoman.utils.DateRenderer;
import com.stoman.utils.DragPanel;
import com.stoman.utils.MsgBox;
import com.stoman.utils.QRCode;
import com.stoman.utils.SpinnerEditor;
import com.stoman.utils.XDate;
import com.stoman.utils.XNumber;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import javax.swing.table.TableStringConverter;

/**
 *
 * @author Huy
 */
public class PhieuNhapXuatKhoJDialog extends javax.swing.JDialog {

    /**
     * Creates new form PhieuKiemKhoDialog
     */
    public PhieuNhapXuatKhoJDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ChiTietPhieuDialog = new javax.swing.JDialog();
        pnlBackgroundDialog = new javax.swing.JPanel();
        pnlTblCTPhieu_main = new javax.swing.JScrollPane();
        tblCTPhieu_main = new javax.swing.JTable();
        pnlThongTinCTP = new javax.swing.JPanel();
        lblLoaiHH = new javax.swing.JLabel();
        lblTenHH = new javax.swing.JLabel();
        cboLoaiHH = new javax.swing.JComboBox<>();
        cboHangHoa = new javax.swing.JComboBox<>();
        pnlChucNangCTP = new javax.swing.JPanel();
        btnThemCTP = new javax.swing.JButton();
        btnXoaCTP = new javax.swing.JButton();
        pnlThanhTieuDeCTP = new DragPanel(ChiTietPhieuDialog);
        lblTieuDeDialog = new javax.swing.JLabel();
        lblThoatCTP = new javax.swing.JLabel();
        btnGrpLoaiPhieu = new javax.swing.ButtonGroup();
        QRCodeDialog = new javax.swing.JDialog();
        pnlThanhTieuDeQR = new DragPanel(this);
        lblTieuDeQR = new javax.swing.JLabel();
        lblThoatQR = new javax.swing.JLabel();
        pnlBackgroundQR = new javax.swing.JPanel();
        lblQRCodeImage = new javax.swing.JLabel();
        pnlBackground = new javax.swing.JPanel();
        tabs = new javax.swing.JTabbedPane();
        pnlChiTiet = new javax.swing.JPanel();
        pnlTblCTPhieu_sub = new javax.swing.JScrollPane();
        tblCTPhieu_sub = new javax.swing.JTable();
        pnlThongTinPhieu = new javax.swing.JPanel();
        lblLoaiDT = new javax.swing.JLabel();
        lblMaNV = new javax.swing.JLabel();
        lblTrangThai = new javax.swing.JLabel();
        lblNgayLap = new javax.swing.JLabel();
        lblNgayHoanThanh = new javax.swing.JLabel();
        lblDoiTac = new javax.swing.JLabel();
        lblNgayThucHien = new javax.swing.JLabel();
        lblLoaiPhieu = new javax.swing.JLabel();
        cboLoaiDT = new javax.swing.JComboBox<>();
        chkHoanThanh = new javax.swing.JCheckBox();
        rdoPhieuNhap = new javax.swing.JRadioButton();
        rdoPhieuXuat = new javax.swing.JRadioButton();
        txtNgayLap = new javax.swing.JFormattedTextField();
        txtNgayThucHien = new javax.swing.JFormattedTextField();
        txtNgayHoanThanh = new javax.swing.JFormattedTextField();
        txtMaNV = new javax.swing.JTextField();
        lblGhiChu = new javax.swing.JLabel();
        pnlGhiChu = new javax.swing.JScrollPane();
        txtGhiChu = new javax.swing.JTextArea();
        cboDoiTac = new javax.swing.JComboBox<>();
        lblNgayHoanThanh1 = new javax.swing.JLabel();
        cboKho = new javax.swing.JComboBox<>();
        pnlNutDieuHuong = new javax.swing.JPanel();
        btnFirst = new javax.swing.JButton();
        btnPrev = new javax.swing.JButton();
        btnNext = new javax.swing.JButton();
        btnLast = new javax.swing.JButton();
        pnlChucNang = new javax.swing.JPanel();
        btnThem = new javax.swing.JButton();
        btnXoa = new javax.swing.JButton();
        btnSua = new javax.swing.JButton();
        btnMoi = new javax.swing.JButton();
        btnChiTiet = new javax.swing.JButton();
        btnXuatMaPhieu = new javax.swing.JButton();
        txtTimKiemCTPhieu = new javax.swing.JTextField();
        lblTimKiemCT = new javax.swing.JLabel();
        lblTimKiemCT2 = new javax.swing.JLabel();
        cboTimKiemCT = new javax.swing.JComboBox<>();
        peparator = new javax.swing.JSeparator();
        pnlDanhSach = new javax.swing.JPanel();
        scrollPane2 = new javax.swing.JScrollPane();
        tblPhieu = new javax.swing.JTable();
        lblTimKiemCT1 = new javax.swing.JLabel();
        txtTimKiemPhieu = new javax.swing.JTextField();
        lblTimKiemPhieu2 = new javax.swing.JLabel();
        cboTimKiemPhieu = new javax.swing.JComboBox<>();
        pnlThanhTieuDe = new DragPanel(this);
        lblTieuDe = new javax.swing.JLabel();
        lblThoat = new javax.swing.JLabel();

        ChiTietPhieuDialog.setTitle("StoMan - Chi tiết phiếu nhập xuất kho");
        ChiTietPhieuDialog.setUndecorated(true);

        pnlBackgroundDialog.setBackground(new java.awt.Color(255, 255, 255));
        pnlBackgroundDialog.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 2, 2, 2, new java.awt.Color(0, 153, 204)));

        pnlTblCTPhieu_main.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Danh sách chi tiết phiếu", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 13))); // NOI18N
        pnlTblCTPhieu_main.setOpaque(false);

        tblCTPhieu_main.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblCTPhieu_main.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblCTPhieu_main.getTableHeader().setReorderingAllowed(false);
        pnlTblCTPhieu_main.setViewportView(tblCTPhieu_main);

        pnlThongTinCTP.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Chi tiết phiếu", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 13))); // NOI18N
        pnlThongTinCTP.setToolTipText("StoMan - Chi tiết phiếu kiểm kho");
        pnlThongTinCTP.setOpaque(false);

        lblLoaiHH.setText("Loại hàng hoá");

        lblTenHH.setText("Tên hàng hoá");

        cboLoaiHH.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboLoaiHHActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlThongTinCTPLayout = new javax.swing.GroupLayout(pnlThongTinCTP);
        pnlThongTinCTP.setLayout(pnlThongTinCTPLayout);
        pnlThongTinCTPLayout.setHorizontalGroup(
            pnlThongTinCTPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlThongTinCTPLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlThongTinCTPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTenHH)
                    .addComponent(lblLoaiHH))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlThongTinCTPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cboLoaiHH, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cboHangHoa, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnlThongTinCTPLayout.setVerticalGroup(
            pnlThongTinCTPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlThongTinCTPLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlThongTinCTPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblLoaiHH)
                    .addComponent(cboLoaiHH, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlThongTinCTPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTenHH)
                    .addComponent(cboHangHoa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlChucNangCTP.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Chức năng", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 13))); // NOI18N
        pnlChucNangCTP.setOpaque(false);
        pnlChucNangCTP.setLayout(new java.awt.GridLayout(0, 1));

        btnThemCTP.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/stoman/icons/add.png"))); // NOI18N
        btnThemCTP.setText("Thêm");
        btnThemCTP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemCTPActionPerformed(evt);
            }
        });
        pnlChucNangCTP.add(btnThemCTP);

        btnXoaCTP.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/stoman/icons/cancel.png"))); // NOI18N
        btnXoaCTP.setText("Xoá");
        btnXoaCTP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaCTPActionPerformed(evt);
            }
        });
        pnlChucNangCTP.add(btnXoaCTP);

        pnlThanhTieuDeCTP.setBackground(new java.awt.Color(0, 153, 204));

        lblTieuDeDialog.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        lblTieuDeDialog.setForeground(new java.awt.Color(255, 255, 255));
        lblTieuDeDialog.setText("STOMAN - CHI TIẾT NHẬP XUẤT KHO");

        lblThoatCTP.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblThoatCTP.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/stoman/icons/close(2).png"))); // NOI18N
        lblThoatCTP.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblThoatCTPMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblThoatCTPMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblThoatCTPMouseExited(evt);
            }
        });

        javax.swing.GroupLayout pnlThanhTieuDeCTPLayout = new javax.swing.GroupLayout(pnlThanhTieuDeCTP);
        pnlThanhTieuDeCTP.setLayout(pnlThanhTieuDeCTPLayout);
        pnlThanhTieuDeCTPLayout.setHorizontalGroup(
            pnlThanhTieuDeCTPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlThanhTieuDeCTPLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTieuDeDialog)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 437, Short.MAX_VALUE)
                .addComponent(lblThoatCTP, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        pnlThanhTieuDeCTPLayout.setVerticalGroup(
            pnlThanhTieuDeCTPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlThanhTieuDeCTPLayout.createSequentialGroup()
                .addGroup(pnlThanhTieuDeCTPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlThanhTieuDeCTPLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(lblTieuDeDialog))
                    .addComponent(lblThoatCTP, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0))
        );

        javax.swing.GroupLayout pnlBackgroundDialogLayout = new javax.swing.GroupLayout(pnlBackgroundDialog);
        pnlBackgroundDialog.setLayout(pnlBackgroundDialogLayout);
        pnlBackgroundDialogLayout.setHorizontalGroup(
            pnlBackgroundDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBackgroundDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlBackgroundDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlBackgroundDialogLayout.createSequentialGroup()
                        .addComponent(pnlThongTinCTP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pnlChucNangCTP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(pnlTblCTPhieu_main))
                .addContainerGap())
            .addComponent(pnlThanhTieuDeCTP, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        pnlBackgroundDialogLayout.setVerticalGroup(
            pnlBackgroundDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBackgroundDialogLayout.createSequentialGroup()
                .addComponent(pnlThanhTieuDeCTP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlBackgroundDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pnlThongTinCTP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlChucNangCTP, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlTblCTPhieu_main, javax.swing.GroupLayout.DEFAULT_SIZE, 298, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout ChiTietPhieuDialogLayout = new javax.swing.GroupLayout(ChiTietPhieuDialog.getContentPane());
        ChiTietPhieuDialog.getContentPane().setLayout(ChiTietPhieuDialogLayout);
        ChiTietPhieuDialogLayout.setHorizontalGroup(
            ChiTietPhieuDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlBackgroundDialog, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        ChiTietPhieuDialogLayout.setVerticalGroup(
            ChiTietPhieuDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlBackgroundDialog, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        QRCodeDialog.setUndecorated(true);
        QRCodeDialog.setResizable(false);

        pnlThanhTieuDeQR.setBackground(new java.awt.Color(0, 153, 204));

        lblTieuDeQR.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        lblTieuDeQR.setForeground(new java.awt.Color(255, 255, 255));
        lblTieuDeQR.setText("STOMAN - XUẤT MÃ PHIẾU (QR)");

        lblThoatQR.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblThoatQR.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/stoman/icons/close(2).png"))); // NOI18N
        lblThoatQR.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblThoatQRMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblThoatQRMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblThoatQRMouseExited(evt);
            }
        });

        javax.swing.GroupLayout pnlThanhTieuDeQRLayout = new javax.swing.GroupLayout(pnlThanhTieuDeQR);
        pnlThanhTieuDeQR.setLayout(pnlThanhTieuDeQRLayout);
        pnlThanhTieuDeQRLayout.setHorizontalGroup(
            pnlThanhTieuDeQRLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlThanhTieuDeQRLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTieuDeQR)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE)
                .addComponent(lblThoatQR, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        pnlThanhTieuDeQRLayout.setVerticalGroup(
            pnlThanhTieuDeQRLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlThanhTieuDeQRLayout.createSequentialGroup()
                .addGroup(pnlThanhTieuDeQRLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlThanhTieuDeQRLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(lblTieuDeQR))
                    .addComponent(lblThoatQR, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0))
        );

        QRCodeDialog.getContentPane().add(pnlThanhTieuDeQR, java.awt.BorderLayout.PAGE_START);

        pnlBackgroundQR.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 2, 2, 2, new java.awt.Color(0, 153, 204)));
        pnlBackgroundQR.setPreferredSize(new java.awt.Dimension(300, 300));
        pnlBackgroundQR.setLayout(new java.awt.GridBagLayout());

        lblQRCodeImage.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153), 2));
        lblQRCodeImage.setPreferredSize(new java.awt.Dimension(200, 200));
        pnlBackgroundQR.add(lblQRCodeImage, new java.awt.GridBagConstraints());

        QRCodeDialog.getContentPane().add(pnlBackgroundQR, java.awt.BorderLayout.CENTER);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("StoMan - Quản lý phiếu nhập xuất kho");
        setFocusCycleRoot(false);
        setUndecorated(true);

        pnlBackground.setBackground(new java.awt.Color(255, 255, 255));
        pnlBackground.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 2, 2, 2, new java.awt.Color(0, 153, 204)));
        pnlBackground.setLayout(new java.awt.BorderLayout());

        pnlChiTiet.setBackground(new java.awt.Color(0, 0, 0));
        pnlChiTiet.setOpaque(false);

        pnlTblCTPhieu_sub.setOpaque(false);

        tblCTPhieu_sub.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblCTPhieu_sub.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblCTPhieu_sub.getTableHeader().setReorderingAllowed(false);
        pnlTblCTPhieu_sub.setViewportView(tblCTPhieu_sub);

        pnlThongTinPhieu.setBackground(new java.awt.Color(255, 255, 255));
        pnlThongTinPhieu.setOpaque(false);

        lblLoaiDT.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        lblLoaiDT.setText("Loại đối tác");

        lblMaNV.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        lblMaNV.setText("Người lập");

        lblTrangThai.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        lblTrangThai.setText("Trạng thái");

        lblNgayLap.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        lblNgayLap.setText("Ngày lập");

        lblNgayHoanThanh.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        lblNgayHoanThanh.setText("Ngày hoàn thành");

        lblDoiTac.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        lblDoiTac.setText("Đối tác");

        lblNgayThucHien.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        lblNgayThucHien.setText("Ngày thực hiện");

        lblLoaiPhieu.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        lblLoaiPhieu.setText("Loại phiếu");

        cboLoaiDT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboLoaiDTActionPerformed(evt);
            }
        });

        chkHoanThanh.setText("Hoàn thành");
        chkHoanThanh.setOpaque(false);

        btnGrpLoaiPhieu.add(rdoPhieuNhap);
        rdoPhieuNhap.setSelected(true);
        rdoPhieuNhap.setText("Phiếu nhập");
        rdoPhieuNhap.setOpaque(false);

        btnGrpLoaiPhieu.add(rdoPhieuXuat);
        rdoPhieuXuat.setText("Phiếu xuất");
        rdoPhieuXuat.setOpaque(false);

        txtNgayLap.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(java.text.DateFormat.getDateInstance(java.text.DateFormat.SHORT))));
        txtNgayLap.setEnabled(false);

        txtNgayThucHien.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("dd-MM-yyyy"))));

        txtNgayHoanThanh.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("dd-MM-yyyy"))));

        lblGhiChu.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        lblGhiChu.setText("Ghi chú");

        txtGhiChu.setColumns(20);
        txtGhiChu.setLineWrap(true);
        txtGhiChu.setRows(5);
        txtGhiChu.setWrapStyleWord(true);
        pnlGhiChu.setViewportView(txtGhiChu);

        lblNgayHoanThanh1.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        lblNgayHoanThanh1.setText("Kho");

        javax.swing.GroupLayout pnlThongTinPhieuLayout = new javax.swing.GroupLayout(pnlThongTinPhieu);
        pnlThongTinPhieu.setLayout(pnlThongTinPhieuLayout);
        pnlThongTinPhieuLayout.setHorizontalGroup(
            pnlThongTinPhieuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlThongTinPhieuLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(pnlThongTinPhieuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblNgayThucHien)
                    .addComponent(lblLoaiPhieu)
                    .addComponent(lblTrangThai)
                    .addComponent(lblLoaiDT, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblMaNV))
                .addGap(10, 10, 10)
                .addGroup(pnlThongTinPhieuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlThongTinPhieuLayout.createSequentialGroup()
                        .addGroup(pnlThongTinPhieuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cboLoaiDT, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtMaNV, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtNgayThucHien, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(pnlThongTinPhieuLayout.createSequentialGroup()
                                .addComponent(rdoPhieuNhap)
                                .addGap(18, 18, 18)
                                .addComponent(rdoPhieuXuat)))
                        .addGap(15, 15, 15)
                        .addGroup(pnlThongTinPhieuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlThongTinPhieuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(lblDoiTac, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblNgayHoanThanh, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblNgayHoanThanh1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(lblNgayLap, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addGroup(pnlThongTinPhieuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlThongTinPhieuLayout.createSequentialGroup()
                                .addGroup(pnlThongTinPhieuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(cboDoiTac, 0, 196, Short.MAX_VALUE)
                                    .addComponent(txtNgayLap))
                                .addGap(15, 15, 15)
                                .addComponent(lblGhiChu))
                            .addGroup(pnlThongTinPhieuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(cboKho, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtNgayHoanThanh, javax.swing.GroupLayout.Alignment.LEADING))))
                    .addComponent(chkHoanThanh)
                    .addGroup(pnlThongTinPhieuLayout.createSequentialGroup()
                        .addGap(598, 598, 598)
                        .addComponent(pnlGhiChu, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                .addGap(15, 15, 15))
        );

        pnlThongTinPhieuLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cboLoaiDT, txtMaNV, txtNgayHoanThanh, txtNgayThucHien});

        pnlThongTinPhieuLayout.setVerticalGroup(
            pnlThongTinPhieuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlThongTinPhieuLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(pnlThongTinPhieuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlThongTinPhieuLayout.createSequentialGroup()
                        .addGroup(pnlThongTinPhieuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblLoaiDT)
                            .addComponent(cboLoaiDT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblDoiTac)
                            .addComponent(lblGhiChu)
                            .addComponent(cboDoiTac, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addGroup(pnlThongTinPhieuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblMaNV)
                            .addComponent(txtMaNV, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtNgayLap, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblNgayLap))
                        .addGap(10, 10, 10)
                        .addGroup(pnlThongTinPhieuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblNgayThucHien)
                            .addComponent(txtNgayThucHien, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblNgayHoanThanh)
                            .addComponent(txtNgayHoanThanh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addGroup(pnlThongTinPhieuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblLoaiPhieu)
                            .addComponent(rdoPhieuNhap)
                            .addComponent(rdoPhieuXuat)
                            .addComponent(lblNgayHoanThanh1)
                            .addComponent(cboKho, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addGroup(pnlThongTinPhieuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblTrangThai)
                            .addComponent(chkHoanThanh)))
                    .addComponent(pnlGhiChu, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10))
        );

        pnlNutDieuHuong.setOpaque(false);

        btnFirst.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/stoman/icons/skip-to-start.png"))); // NOI18N
        btnFirst.setPreferredSize(new java.awt.Dimension(100, 33));
        btnFirst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFirstActionPerformed(evt);
            }
        });
        pnlNutDieuHuong.add(btnFirst);

        btnPrev.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/stoman/icons/double-left-24.png"))); // NOI18N
        btnPrev.setPreferredSize(new java.awt.Dimension(100, 33));
        btnPrev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrevActionPerformed(evt);
            }
        });
        pnlNutDieuHuong.add(btnPrev);

        btnNext.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/stoman/icons/double-right.png"))); // NOI18N
        btnNext.setPreferredSize(new java.awt.Dimension(100, 33));
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });
        pnlNutDieuHuong.add(btnNext);

        btnLast.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/stoman/icons/skip-to-end.png"))); // NOI18N
        btnLast.setPreferredSize(new java.awt.Dimension(100, 33));
        btnLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLastActionPerformed(evt);
            }
        });
        pnlNutDieuHuong.add(btnLast);

        pnlChucNang.setBackground(new java.awt.Color(153, 153, 255));
        pnlChucNang.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 4, 0));
        pnlChucNang.setOpaque(false);
        pnlChucNang.setLayout(new java.awt.GridLayout(6, 1));

        btnThem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/stoman/icons/add-32.png"))); // NOI18N
        btnThem.setText("Thêm");
        btnThem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemActionPerformed(evt);
            }
        });
        pnlChucNang.add(btnThem);

        btnXoa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/stoman/icons/cancel-32.png"))); // NOI18N
        btnXoa.setText("Xoá");
        btnXoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaActionPerformed(evt);
            }
        });
        pnlChucNang.add(btnXoa);

        btnSua.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/stoman/icons/edit-property-32.png"))); // NOI18N
        btnSua.setText("Sửa");
        btnSua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuaActionPerformed(evt);
            }
        });
        pnlChucNang.add(btnSua);

        btnMoi.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/stoman/icons/new-document-32.png"))); // NOI18N
        btnMoi.setText("Mới");
        btnMoi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMoiActionPerformed(evt);
            }
        });
        pnlChucNang.add(btnMoi);

        btnChiTiet.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/stoman/icons/more-details-32.png"))); // NOI18N
        btnChiTiet.setText("Chi tiết");
        btnChiTiet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChiTietActionPerformed(evt);
            }
        });
        pnlChucNang.add(btnChiTiet);

        btnXuatMaPhieu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/stoman/icons/qr-code.png"))); // NOI18N
        btnXuatMaPhieu.setText("Xuất mã phiếu");
        btnXuatMaPhieu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXuatMaPhieuActionPerformed(evt);
            }
        });
        pnlChucNang.add(btnXuatMaPhieu);

        txtTimKiemCTPhieu.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtTimKiemCTPhieuKeyReleased(evt);
            }
        });

        lblTimKiemCT.setText("Tìm kiếm");

        lblTimKiemCT2.setText("theo");

        cboTimKiemCT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboTimKiemCTActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlChiTietLayout = new javax.swing.GroupLayout(pnlChiTiet);
        pnlChiTiet.setLayout(pnlChiTietLayout);
        pnlChiTietLayout.setHorizontalGroup(
            pnlChiTietLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlThongTinPhieu, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(pnlChiTietLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(pnlChiTietLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(peparator)
                    .addGroup(pnlChiTietLayout.createSequentialGroup()
                        .addGroup(pnlChiTietLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlChiTietLayout.createSequentialGroup()
                                .addComponent(lblTimKiemCT)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtTimKiemCTPhieu)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblTimKiemCT2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cboTimKiemCT, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(pnlTblCTPhieu_sub)
                            .addComponent(pnlNutDieuHuong, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(10, 10, 10)
                        .addComponent(pnlChucNang, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(10, 10, 10))
        );
        pnlChiTietLayout.setVerticalGroup(
            pnlChiTietLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlChiTietLayout.createSequentialGroup()
                .addComponent(pnlThongTinPhieu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(peparator, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addGroup(pnlChiTietLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlChiTietLayout.createSequentialGroup()
                        .addGroup(pnlChiTietLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblTimKiemCT)
                            .addComponent(txtTimKiemCTPhieu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblTimKiemCT2)
                            .addComponent(cboTimKiemCT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addComponent(pnlTblCTPhieu_sub, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addGap(10, 10, 10)
                        .addComponent(pnlNutDieuHuong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(pnlChucNang, javax.swing.GroupLayout.DEFAULT_SIZE, 423, Short.MAX_VALUE))
                .addGap(10, 10, 10))
        );

        pnlThongTinPhieu.getAccessibleContext().setAccessibleName("");

        tabs.addTab("Thông tin phiếu nhập xuất", pnlChiTiet);

        pnlDanhSach.setOpaque(false);

        tblPhieu.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblPhieu.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblPhieu.getTableHeader().setReorderingAllowed(false);
        tblPhieu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblPhieuMouseClicked(evt);
            }
        });
        scrollPane2.setViewportView(tblPhieu);

        lblTimKiemCT1.setText("Tìm kiếm");

        txtTimKiemPhieu.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtTimKiemPhieuKeyReleased(evt);
            }
        });

        lblTimKiemPhieu2.setText("theo");

        cboTimKiemPhieu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboTimKiemPhieuActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlDanhSachLayout = new javax.swing.GroupLayout(pnlDanhSach);
        pnlDanhSach.setLayout(pnlDanhSachLayout);
        pnlDanhSachLayout.setHorizontalGroup(
            pnlDanhSachLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDanhSachLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(pnlDanhSachLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1004, Short.MAX_VALUE)
                    .addGroup(pnlDanhSachLayout.createSequentialGroup()
                        .addComponent(lblTimKiemCT1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtTimKiemPhieu, javax.swing.GroupLayout.PREFERRED_SIZE, 579, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblTimKiemPhieu2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cboTimKiemPhieu, 0, 311, Short.MAX_VALUE)))
                .addGap(15, 15, 15))
        );
        pnlDanhSachLayout.setVerticalGroup(
            pnlDanhSachLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlDanhSachLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(pnlDanhSachLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTimKiemCT1)
                    .addComponent(txtTimKiemPhieu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTimKiemPhieu2)
                    .addComponent(cboTimKiemPhieu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addComponent(scrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 556, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15))
        );

        tabs.addTab("Danh sách phiếu nhập xuất", pnlDanhSach);

        pnlBackground.add(tabs, java.awt.BorderLayout.CENTER);

        pnlThanhTieuDe.setBackground(new java.awt.Color(0, 153, 204));

        lblTieuDe.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        lblTieuDe.setForeground(new java.awt.Color(255, 255, 255));
        lblTieuDe.setText("STOMAN - QUẢN LÝ NHẬP XUẤT KHO");

        lblThoat.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblThoat.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/stoman/icons/close(2).png"))); // NOI18N
        lblThoat.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblThoatMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblThoatMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblThoatMouseExited(evt);
            }
        });

        javax.swing.GroupLayout pnlThanhTieuDeLayout = new javax.swing.GroupLayout(pnlThanhTieuDe);
        pnlThanhTieuDe.setLayout(pnlThanhTieuDeLayout);
        pnlThanhTieuDeLayout.setHorizontalGroup(
            pnlThanhTieuDeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlThanhTieuDeLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTieuDe)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 762, Short.MAX_VALUE)
                .addComponent(lblThoat, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        pnlThanhTieuDeLayout.setVerticalGroup(
            pnlThanhTieuDeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlThanhTieuDeLayout.createSequentialGroup()
                .addGroup(pnlThanhTieuDeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlThanhTieuDeLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(lblTieuDe))
                    .addComponent(lblThoat, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0))
        );

        pnlBackground.add(pnlThanhTieuDe, java.awt.BorderLayout.PAGE_START);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlBackground, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlBackground, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cboLoaiDTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboLoaiDTActionPerformed
        // TODO add your handling code here:
        fillToComboBoxDoiTac();
    }//GEN-LAST:event_cboLoaiDTActionPerformed

    private void btnChiTietActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChiTietActionPerformed
        // TODO add your handling code here:
        if (rowPhieu < 0) {
            MsgBox.alert(this, "Vui lòng chọn một phiếu!");
            return;
        }
        ChiTietPhieuDialog.setVisible(true);
    }//GEN-LAST:event_btnChiTietActionPerformed

    private void tblPhieuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblPhieuMouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount() < 2) {
            return;
        }
        this.rowPhieu = tblPhieu.getSelectedRow();
        edit();
    }//GEN-LAST:event_tblPhieuMouseClicked

    private void btnMoiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMoiActionPerformed
        // TODO add your handling code here:
        delCTP.clear();
        this.clearForm();
    }//GEN-LAST:event_btnMoiActionPerformed

    private void btnThemCTPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemCTPActionPerformed
        this.insertCT();
    }//GEN-LAST:event_btnThemCTPActionPerformed

    private void cboLoaiHHActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboLoaiHHActionPerformed
        this.fillToComboBoxHangHoa();
    }//GEN-LAST:event_cboLoaiHHActionPerformed

    private void btnXoaCTPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaCTPActionPerformed
        this.deleteCT();
    }//GEN-LAST:event_btnXoaCTPActionPerformed

    private void btnThemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemActionPerformed
        this.insertPhieu();
        this.clearForm();
        this.fillToTablePhieu();
    }//GEN-LAST:event_btnThemActionPerformed

    private void btnXoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaActionPerformed
        // TODO add your handling code here:
        this.deletePhieu();
        this.clearForm();
        this.fillToTablePhieu();
    }//GEN-LAST:event_btnXoaActionPerformed

    private void btnSuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuaActionPerformed
        // TODO add your handling code here:
        this.updatePhieu();
        this.clearForm();
        this.fillToTablePhieu();
    }//GEN-LAST:event_btnSuaActionPerformed

    private void lblThoatMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblThoatMouseClicked
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_lblThoatMouseClicked

    private void lblThoatMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblThoatMouseEntered
        // TODO add your handling code here:
        lblThoat.setIcon(new ImageIcon(getClass().getResource("/com/stoman/icons/close.png")));
    }//GEN-LAST:event_lblThoatMouseEntered

    private void lblThoatMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblThoatMouseExited
        // TODO add your handling code here:
        lblThoat.setIcon(new ImageIcon(getClass().getResource("/com/stoman/icons/close(2).png")));
    }//GEN-LAST:event_lblThoatMouseExited

    private void txtTimKiemCTPhieuKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTimKiemCTPhieuKeyReleased
        // TODO add your handling code here:
        if (tblCTPhieu_sub.getRowCount() > 0) {
            searchCTPhieu();
        }
    }//GEN-LAST:event_txtTimKiemCTPhieuKeyReleased

    private void cboTimKiemCTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboTimKiemCTActionPerformed
        // TODO add your handling code here:
        if (tblCTPhieu_sub.getRowCount() > 0) {
            txtTimKiemCTPhieu.setText("");
            searchCTPhieu();
        }
    }//GEN-LAST:event_cboTimKiemCTActionPerformed

    private void txtTimKiemPhieuKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTimKiemPhieuKeyReleased
        // TODO add your handling code here:
        searchPhieu();
    }//GEN-LAST:event_txtTimKiemPhieuKeyReleased

    private void cboTimKiemPhieuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboTimKiemPhieuActionPerformed
        // TODO add your handling code here:
        if (tblPhieu.getRowCount() > 0) {
            txtTimKiemPhieu.setText("");
            searchPhieu();
        }
    }//GEN-LAST:event_cboTimKiemPhieuActionPerformed

    private void btnXuatMaPhieuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXuatMaPhieuActionPerformed
        // TODO add your handling code here:
        createQRCode();
    }//GEN-LAST:event_btnXuatMaPhieuActionPerformed

    private void lblThoatCTPMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblThoatCTPMouseClicked
        // TODO add your handling code here:
        ChiTietPhieuDialog.dispose();
    }//GEN-LAST:event_lblThoatCTPMouseClicked

    private void lblThoatCTPMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblThoatCTPMouseEntered
        // TODO add your handling code here:
        lblThoat.setIcon(new ImageIcon(getClass().getResource("/com/stoman/icons/close.png")));
    }//GEN-LAST:event_lblThoatCTPMouseEntered

    private void lblThoatCTPMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblThoatCTPMouseExited
        // TODO add your handling code here:
        lblThoat.setIcon(new ImageIcon(getClass().getResource("/com/stoman/icons/close(2).png")));
    }//GEN-LAST:event_lblThoatCTPMouseExited

    private void lblThoatQRMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblThoatQRMouseClicked
        // TODO add your handling code here:
        QRCodeDialog.dispose();
    }//GEN-LAST:event_lblThoatQRMouseClicked

    private void lblThoatQRMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblThoatQRMouseEntered
        // TODO add your handling code here:
        lblThoatQR.setIcon(new ImageIcon(getClass().getResource("/com/stoman/icons/close.png")));
    }//GEN-LAST:event_lblThoatQRMouseEntered

    private void lblThoatQRMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblThoatQRMouseExited
        // TODO add your handling code here:
        lblThoatQR.setIcon(new ImageIcon(getClass().getResource("/com/stoman/icons/close(2).png")));
    }//GEN-LAST:event_lblThoatQRMouseExited

    private void btnFirstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFirstActionPerformed
        // TODO add your handling code here:
        first();
    }//GEN-LAST:event_btnFirstActionPerformed

    private void btnPrevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrevActionPerformed
        // TODO add your handling code here:
        prev();
    }//GEN-LAST:event_btnPrevActionPerformed

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        // TODO add your handling code here:
        next();
    }//GEN-LAST:event_btnNextActionPerformed

    private void btnLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLastActionPerformed
        // TODO add your handling code here:
        last();
    }//GEN-LAST:event_btnLastActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PhieuNhapXuatKhoJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PhieuNhapXuatKhoJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PhieuNhapXuatKhoJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PhieuNhapXuatKhoJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                PhieuNhapXuatKhoJDialog dialog = new PhieuNhapXuatKhoJDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDialog ChiTietPhieuDialog;
    private javax.swing.JDialog QRCodeDialog;
    private javax.swing.JButton btnChiTiet;
    private javax.swing.JButton btnFirst;
    private javax.swing.ButtonGroup btnGrpLoaiPhieu;
    private javax.swing.JButton btnLast;
    private javax.swing.JButton btnMoi;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnPrev;
    private javax.swing.JButton btnSua;
    private javax.swing.JButton btnThem;
    private javax.swing.JButton btnThemCTP;
    private javax.swing.JButton btnXoa;
    private javax.swing.JButton btnXoaCTP;
    private javax.swing.JButton btnXuatMaPhieu;
    private javax.swing.JComboBox<String> cboDoiTac;
    private javax.swing.JComboBox<String> cboHangHoa;
    private javax.swing.JComboBox<String> cboKho;
    private javax.swing.JComboBox<String> cboLoaiDT;
    private javax.swing.JComboBox<String> cboLoaiHH;
    private javax.swing.JComboBox<String> cboTimKiemCT;
    private javax.swing.JComboBox<String> cboTimKiemPhieu;
    private javax.swing.JCheckBox chkHoanThanh;
    private javax.swing.JLabel lblDoiTac;
    private javax.swing.JLabel lblGhiChu;
    private javax.swing.JLabel lblLoaiDT;
    private javax.swing.JLabel lblLoaiHH;
    private javax.swing.JLabel lblLoaiPhieu;
    private javax.swing.JLabel lblMaNV;
    private javax.swing.JLabel lblNgayHoanThanh;
    private javax.swing.JLabel lblNgayHoanThanh1;
    private javax.swing.JLabel lblNgayLap;
    private javax.swing.JLabel lblNgayThucHien;
    private javax.swing.JLabel lblQRCodeImage;
    private javax.swing.JLabel lblTenHH;
    private javax.swing.JLabel lblThoat;
    private javax.swing.JLabel lblThoatCTP;
    private javax.swing.JLabel lblThoatQR;
    private javax.swing.JLabel lblTieuDe;
    private javax.swing.JLabel lblTieuDeDialog;
    private javax.swing.JLabel lblTieuDeQR;
    private javax.swing.JLabel lblTimKiemCT;
    private javax.swing.JLabel lblTimKiemCT1;
    private javax.swing.JLabel lblTimKiemCT2;
    private javax.swing.JLabel lblTimKiemPhieu2;
    private javax.swing.JLabel lblTrangThai;
    private javax.swing.JSeparator peparator;
    private javax.swing.JPanel pnlBackground;
    private javax.swing.JPanel pnlBackgroundDialog;
    private javax.swing.JPanel pnlBackgroundQR;
    private javax.swing.JPanel pnlChiTiet;
    private javax.swing.JPanel pnlChucNang;
    private javax.swing.JPanel pnlChucNangCTP;
    private javax.swing.JPanel pnlDanhSach;
    private javax.swing.JScrollPane pnlGhiChu;
    private javax.swing.JPanel pnlNutDieuHuong;
    private javax.swing.JScrollPane pnlTblCTPhieu_main;
    private javax.swing.JScrollPane pnlTblCTPhieu_sub;
    private javax.swing.JPanel pnlThanhTieuDe;
    private javax.swing.JPanel pnlThanhTieuDeCTP;
    private javax.swing.JPanel pnlThanhTieuDeQR;
    private javax.swing.JPanel pnlThongTinCTP;
    private javax.swing.JPanel pnlThongTinPhieu;
    private javax.swing.JRadioButton rdoPhieuNhap;
    private javax.swing.JRadioButton rdoPhieuXuat;
    private javax.swing.JScrollPane scrollPane2;
    private javax.swing.JTabbedPane tabs;
    private javax.swing.JTable tblCTPhieu_main;
    private javax.swing.JTable tblCTPhieu_sub;
    private javax.swing.JTable tblPhieu;
    private javax.swing.JTextArea txtGhiChu;
    private javax.swing.JTextField txtMaNV;
    private javax.swing.JFormattedTextField txtNgayHoanThanh;
    private javax.swing.JFormattedTextField txtNgayLap;
    private javax.swing.JFormattedTextField txtNgayThucHien;
    private javax.swing.JTextField txtTimKiemCTPhieu;
    private javax.swing.JTextField txtTimKiemPhieu;
    // End of variables declaration//GEN-END:variables

    private PhieuDAO pDAO = new PhieuDAO();
    private ChiTietPhieuDAO ctpDAO = new ChiTietPhieuDAO();
    private LoaiDoiTacDAO ldtDAO = new LoaiDoiTacDAO();
    private DoiTacDAO dtDAO = new DoiTacDAO();
    private LuuTruDAO ltDAO = new LuuTruDAO();
    private LoaiHangHoaDAO lhhDAO = new LoaiHangHoaDAO();
    private HangHoaDAO hhDAO = new HangHoaDAO();
    private KhoDAO kDAO = new KhoDAO();
    private ProcedureDAO spDAO = new ProcedureDAO();

    private DefaultTableModel modelPhieu;
    private DefaultTableModel modelCTPhieu;

    private String numFormat = "#,##0.0";
    private String dateFormat = "dd-mm-yyyy";

    private boolean isUpdate = false;

    private int rowPhieu = -1;

    private void init() {
        this.setLocationRelativeTo(null);
        this.initDialogOther();

        this.formatTable();
        this.fillToComboBoxTimKiemCTPhieu();
        this.fillToComboBoxTimKiemPhieu();
        this.fillToTablePhieu();
        this.fillToComboBoxLoaiDT();
        this.fillToComboBoxLoaiHH();
        this.fillToComboBoxKho();

        tabs.setSelectedIndex(1);

    }

    void initDialogOther() {
        ChiTietPhieuDialog.pack();
        ChiTietPhieuDialog.setLocationRelativeTo(null);
        ChiTietPhieuDialog.setModalityType(ModalityType.APPLICATION_MODAL);
        ChiTietPhieuDialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);

        QRCodeDialog.pack();
        QRCodeDialog.setLocationRelativeTo(null);
        QRCodeDialog.setModalityType(ModalityType.APPLICATION_MODAL);
        QRCodeDialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
    }

    // Đổ dữ liệu phiếu nhập xuất
    private void fillToTablePhieu() {
        tblPhieu.setRowSorter(null);
        modelPhieu.setRowCount(0);
        List<Phieu> list = pDAO.selectAll();
        int i = 1;
        for (Phieu p : list) {
            int maLT = ctpDAO.getOnlyOneMaLT(p.getMaPhieu());
            if (maLT == 0) {
                continue;
            }
            int maKho = ltDAO.getMaKho(maLT);
            Kho kho = kDAO.selectByID(maKho);
            modelPhieu.addRow(new Object[]{
                i++,
                dtDAO.getTenDT(p.getMaDT()),
                p.isLoai() ? "Nhập" : "Xuất",
                kho,
                p.isTrangThai() ? "Đã hoàn thành" : "Chưa hoàn thành",
                p.getNgThucHien(),
                p.getNgHoanThanh(),
                p.getNgayLap(),
                p
            });
        }

    }

    // Đổ dữ liệu chi tiết phiếu
    private void fillToTableCTPhieu() {
        tblCTPhieu_main.setRowSorter(null);
        tblCTPhieu_sub.setRowSorter(null);
        modelCTPhieu.setRowCount(0);
        try {
            String maPhieu = tblCTPhieu_sub.getToolTipText();
            if (maPhieu == null) {
                return;
            }
            List<ChiTietPhieu> list = ctpDAO.selectByMaPhieu(Integer.parseInt(maPhieu));
            if (list.size() < 1) {
                return;
            }
            int i = 1;
            for (ChiTietPhieu ctp : list) {
                String maHH = ltDAO.selectByID(ctp.getMaLT()).getMaHH();
                HangHoa hh = hhDAO.selectByID(maHH);
                modelCTPhieu.addRow(new Object[]{
                    i++,
                    hh,
                    XNumber.toString(ctp.getSoLuong(), numFormat),
                    XNumber.toString(ctp.getDonGia(), numFormat),
                    ctp.getMaCTP()
                });
            }
            tblCTPhieu_sub.setModel(modelCTPhieu);
            tblCTPhieu_main.setModel(modelCTPhieu);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Đổ dữ liệu ComboBox loại đối tác
    private void fillToComboBoxLoaiDT() {
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        model.removeAllElements();
        try {
            List<LoaiDoiTac> list = ldtDAO.selectAll();
            for (LoaiDoiTac ldt : list) {
                model.addElement(ldt);
            }
            cboLoaiDT.setModel(model);
            fillToComboBoxDoiTac();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Đổ dữ liệu ComboBox đối tác
    private void fillToComboBoxDoiTac() {
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        model.removeAllElements();
        try {
            LoaiDoiTac ldt = (LoaiDoiTac) cboLoaiDT.getSelectedItem();
            List<DoiTac> list = dtDAO.selectByLoaiDT(ldt.getMaLDT());
            for (DoiTac dt : list) {
                model.addElement(dt);
            }
            cboDoiTac.setModel(model);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Đổ dữ liệu vào ComboBox kho
    private void fillToComboBoxKho() {
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        model.removeAllElements();
        try {
            List<Kho> list = kDAO.selectAll();
            for (Kho k : list) {
                model.addElement(k);
            }
            cboKho.setModel(model);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Đổ dữ liệu ComboBox loại hàng hoá
    private void fillToComboBoxLoaiHH() {
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        model.removeAllElements();
        try {
            List<LoaiHangHoa> list = lhhDAO.selectAll();
            for (LoaiHangHoa lhh : list) {
                model.addElement(lhh);
            }
            cboLoaiHH.setModel(model);
            fillToComboBoxHangHoa();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Đổ dữ liệu ComboBox hàng hoá
    private void fillToComboBoxHangHoa() {
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        model.removeAllElements();
        try {
            LoaiHangHoa lhh = (LoaiHangHoa) cboLoaiHH.getSelectedItem();
            List<HangHoa> list = hhDAO.selectByLoaiHangHoa(lhh.getMaLHH());
            for (HangHoa hh : list) {
                model.addElement(hh);
            }
            cboHangHoa.setModel(model);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Lấy dữ liệu từ form phiếu nhập
    private Phieu getFormPhieu() {
        LoaiDoiTac ldt = (LoaiDoiTac) cboLoaiDT.getSelectedItem();
        Phieu p = new Phieu();
        p.setLoai(rdoPhieuNhap.isSelected());
        p.setMaDT(ldt.getMaLDT());
        p.setMaNV(txtMaNV.getText());
        p.setNgHoanThanh(XDate.toDate(txtNgayHoanThanh.getText(), dateFormat));
        p.setNgThucHien(XDate.toDate(txtNgayThucHien.getText(), dateFormat));
        p.setNgayLap(XDate.toDate(txtNgayLap.getText(), dateFormat + "(hh:MM:ss)"));
        p.setTrangThai(chkHoanThanh.isSelected());
        p.setGhiChu(txtGhiChu.getText());
        return p;
    }

    // Nhập dữ liệu vào form phiếu nhập
    private void setFormPhieu(Phieu p) {
        DoiTac dt = dtDAO.selectByID(p.getMaDT());
        LoaiDoiTac ldt = ldtDAO.selectByID(dt.getMaLDT());
        Kho kho = (Kho) tblPhieu.getValueAt(rowPhieu, 3);
        cboLoaiDT.setSelectedItem(ldt);
        cboDoiTac.setSelectedItem(dt);
        txtMaNV.setText(p.getMaNV());
        txtNgayLap.setText(XDate.toString(p.getNgayLap(), dateFormat + "(hh:MM:ss)"));
        txtNgayThucHien.setText(XDate.toString(p.getNgThucHien(), dateFormat));
        txtNgayHoanThanh.setText(XDate.toString(p.getNgHoanThanh(), dateFormat));
        cboKho.setSelectedItem(kho);
        if (p.isLoai()) {
            rdoPhieuNhap.setSelected(true);
        } else {
            rdoPhieuXuat.setSelected(true);
        }
        chkHoanThanh.setSelected(p.isTrangThai());
        txtGhiChu.setText(p.getGhiChu());
        tblCTPhieu_sub.setToolTipText(p.getMaPhieu().toString());

        this.fillToTableCTPhieu();
    }

    // Lấy dữ liệu từ form chi tiết phiếu
    private ChiTietPhieu getFormCTPhieu(int row) {
        ChiTietPhieu ctp = new ChiTietPhieu();
        ctp.setSoLuong(XNumber.toDouble((String) modelCTPhieu.getValueAt(row, 2), numFormat));
        ctp.setDonGia(XNumber.toDouble((String) modelCTPhieu.getValueAt(row, 3), numFormat));
        Integer maCTP = (Integer) modelCTPhieu.getValueAt(row, 4);
        ctp.setMaCTP(maCTP);

        return ctp;
    }

    // Thêm hàng hóa vào bảng Chi tiết
    private void insertCT() {
        modelCTPhieu.addRow(new Object[]{
            tblCTPhieu_main.getRowCount() + 1,
            (HangHoa) cboHangHoa.getSelectedItem(),
            XNumber.toString(0.0, numFormat),
            XNumber.toString(0.0, numFormat),
            0
        });
    }

    // Xóa hàng hóa khỏi chi tiết
    private ArrayList<ChiTietPhieu> delCTP = new ArrayList<>();

    private void deleteCT() {
        int delRow = tblCTPhieu_main.getSelectedRow();

        if (isUpdate) {
            delCTP.add((ChiTietPhieu) modelCTPhieu.getValueAt(delRow, 4));
        }
        modelCTPhieu.removeRow(delRow);
        for (int i = 0; i < modelCTPhieu.getRowCount(); i++) {
            modelCTPhieu.setValueAt(i + 1, i, 0);
        }
    }

    // Nhập phiếu mới vào hệ thống và cập nhật thông tin hàng hóa
    private void insertPhieu() {
        Phieu phieu = this.getFormPhieu();
        ChiTietPhieu ctp;
        pDAO.insert(phieu);

        int maPhieu = pDAO.getMaPhieuByNVandCreatedDate(phieu.getMaNV(), phieu.getNgayLap());

        int rows = modelCTPhieu.getRowCount();

        if (phieu.isLoai()) {
            for (int i = 0; i < rows; i++) {
                ctp = getFormCTPhieu(i);
                HangHoa hh = (HangHoa) modelCTPhieu.getValueAt(i, 1);
                Kho kho = (Kho) cboKho.getSelectedItem();

                spDAO.insertNhap(ctp, maPhieu, hh, kho);
            }
        } else {
            for (int i = 0; i < rows; i++) {
                ctp = getFormCTPhieu(i);
                HangHoa hh = (HangHoa) modelCTPhieu.getValueAt(i, 1);
                Kho kho = (Kho) cboKho.getSelectedItem();

                spDAO.insertXuat(ctp, maPhieu, hh, kho);
            }
        }
        MsgBox.alert(this, "Thêm phiếu " + (phieu.isLoai() ? "nhập" : "xuất") + " thành công!");
    }

    // Cập nhật phiếu vào hệ thống và cập nhật thông tin hàng hóa
    private void updatePhieu() {
        Phieu phieu = this.getFormPhieu();
        String maPhieu = tblCTPhieu_sub.getToolTipText();

        if (maPhieu == null) {
            return;
        }
        phieu.setMaPhieu(Integer.valueOf(maPhieu));
        Kho kho = (Kho) cboKho.getSelectedItem();
        pDAO.update(phieu);

        ChiTietPhieu ctp;
        int rows = modelCTPhieu.getRowCount();
        if (phieu.isLoai()) {
            for (int i = 0; i < rows; i++) {
                ctp = getFormCTPhieu(i);

                if (ctp.getMaCTP() != 0) {
                    spDAO.updateNhap(ctp);
                } else {
                    HangHoa hh = (HangHoa) modelCTPhieu.getValueAt(i, 1);
                    spDAO.insertNhap(ctp, phieu.getMaPhieu(), hh, kho);
                }
            }
            for (ChiTietPhieu ctpDel : delCTP) {
                spDAO.deleteNhap(ctpDel);
            }
        } else {
            for (int i = 0; i < rows; i++) {
                ctp = getFormCTPhieu(i);

                if (ctp.getMaCTP() != 0) {
                    spDAO.updateXuat(ctp);
                } else {
                    HangHoa hh = (HangHoa) modelCTPhieu.getValueAt(i, 1);
                    spDAO.insertXuat(ctp, phieu.getMaPhieu(), hh, kho);
                }
            }
            for (ChiTietPhieu ctpDel : delCTP) {
                spDAO.deleteXuat(ctpDel);
            }
        }
        MsgBox.alert(this, "Cập nhật phiếu " + (phieu.isLoai() ? "nhập" : "xuất") + " thành công!");
    }

    // Xoá phieu khoi he thong
    private void deletePhieu() {
        Phieu phieu = this.getFormPhieu();
        String maPhieu = tblCTPhieu_sub.getToolTipText();

        if (maPhieu == null) {
            return;
        }

        int rows = modelCTPhieu.getRowCount();
        ChiTietPhieu ctp;
        if (phieu.isLoai()) {
            for (ChiTietPhieu ctpDel : delCTP) {
                spDAO.deleteNhap(ctpDel);
            }
            for (int i = 0; i < rows; i++) {
                ctp = getFormCTPhieu(i);
                if (ctp.getMaCTP() != 0) {
                    spDAO.deleteNhap(ctp);
                }
            }
        } else {
            for (ChiTietPhieu ctpDel : delCTP) {
                spDAO.deleteXuat(ctpDel);
            }
            for (int i = 0; i < rows; i++) {
                ctp = getFormCTPhieu(i);
                if (ctp.getMaCTP() != 0) {
                    spDAO.deleteXuat(ctp);
                }
            }
        }

        pDAO.delete(Integer.valueOf(maPhieu));

        MsgBox.alert(this, "Xóa phiếu " + (phieu.isLoai() ? "nhập" : "xuất") + " thành công!");
    }

    // Xóa trắng form
    private void clearForm() {
        cboLoaiDT.setSelectedIndex(0);
        cboDoiTac.setSelectedIndex(0);
        txtMaNV.setText(null); //Auth.user.getMaNV()
        Date NgayLap = new Date(System.currentTimeMillis());
        txtNgayLap.setText(XDate.toString(NgayLap, dateFormat + "(hh:MM:ss)"));
        txtNgayThucHien.setText(null);
        txtNgayHoanThanh.setText(null);
        rdoPhieuNhap.setSelected(true);
        cboKho.setSelectedIndex(0);
        chkHoanThanh.setSelected(false);
        txtGhiChu.setText(null);
        tblCTPhieu_sub.setToolTipText(null);
        lblQRCodeImage.setIcon(null);
        this.fillToTableCTPhieu();

        isUpdate = false;
    }

    // Cập nhật giao diện form theo hoạt động
    private void updateStatus() {
        boolean edit = (this.rowPhieu >= 0);
        boolean first = (this.rowPhieu == 0);
        boolean last = (this.rowPhieu == tblPhieu.getRowCount() - 1);

        boolean isPhieuEmpty = (tblPhieu.getRowCount() == 0);
        boolean isCTPhieu_subEmpty = (tblCTPhieu_sub.getRowCount() == 0);
        boolean isCTPhieu_mainEmpty = (tblCTPhieu_main.getRowCount() == 0);
        boolean isManager = Auth.isManager();

        // Chỉ bật bộ sắp xếp khi bảng có dữ liệu
        tblPhieu.setAutoCreateRowSorter(!isPhieuEmpty);
        tblCTPhieu_sub.setAutoCreateRowSorter(!isCTPhieu_subEmpty);
        tblCTPhieu_main.setAutoCreateRowSorter(!isCTPhieu_mainEmpty);
        
        // Chọn hàng trên bảng
        if (edit) {
            tblPhieu.setRowSelectionInterval(rowPhieu, rowPhieu);
        }

        // Trạng thái form
        btnThem.setEnabled(!edit && isManager);
        btnSua.setEnabled(edit && isManager);
        btnXoa.setEnabled(edit && isManager);
        btnMoi.setEnabled(isManager);
        btnChiTiet.setEnabled(edit);
        btnXuatMaPhieu.setEnabled(edit);

        btnThemCTP.setEnabled(isManager);
        btnXoaCTP.setEnabled(isManager);
        cboLoaiHH.setEnabled(isManager);
        cboHangHoa.setEnabled(isManager);

        // Trạng thái điều hướng
        btnFirst.setEnabled(edit && !first);
        btnPrev.setEnabled(edit && !first);
        btnNext.setEnabled(edit && !last);
        btnLast.setEnabled(edit && !last);
    }

    // Định dạng bảng
    private void formatTable() {
        // Dữ liệu hàng tiêu đề bảng
        String headerPhieu[] = {"STT", "Đối tác", "Loại", "Kho", "Trạng thái",
            "Ngày thực hiện", "Ngày hoàn thành", "Ngày lập", "Người lập"};
        this.modelPhieu = new DefaultTableModel(headerPhieu, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }

            @Override
            public Class getColumnClass(int columnIndex) {
                if (getValueAt(0, columnIndex) == null) {
                    return Object.class;
                }
                return getValueAt(0, columnIndex).getClass();
            }
        };
        String headerCTPhieu[] = {"STT", "Tên hàng hóa", "Số lượng", "Đơn giá", "Phiếu"};
        this.modelCTPhieu = new DefaultTableModel(headerCTPhieu, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                if (column == 2 || column == 3) {
                    return true;
                }
                return false;
            }

            @Override
            public Class getColumnClass(int columnIndex) {
                if (getValueAt(0, columnIndex) == null) {
                    return Object.class;
                }
                return getValueAt(0, columnIndex).getClass();
            }
        };

        tblPhieu.setModel(modelPhieu);
        tblCTPhieu_sub.setModel(modelCTPhieu);
        tblCTPhieu_main.setModel(modelCTPhieu);

        // Chỉnh độ dài các cột bảng Phiếu
        tblPhieu.getColumnModel().getColumn(0).setPreferredWidth(16);
        tblPhieu.getColumnModel().getColumn(1).setPreferredWidth(310);
        tblPhieu.getColumnModel().getColumn(2).setPreferredWidth(32);
        tblPhieu.getColumnModel().getColumn(3).setPreferredWidth(18);
        tblPhieu.getColumnModel().getColumn(4).setPreferredWidth(82);
        tblPhieu.getColumnModel().getColumn(5).setPreferredWidth(88);
        tblPhieu.getColumnModel().getColumn(6).setPreferredWidth(87);
        tblPhieu.getColumnModel().getColumn(7).setPreferredWidth(124);
        tblPhieu.getColumnModel().getColumn(8).setPreferredWidth(80);
        // Chỉnh độ dài các cột bảng Chi tiết phiếu
        tblCTPhieu_main.getColumnModel().getColumn(0).setPreferredWidth(15);
        tblCTPhieu_main.getColumnModel().getColumn(1).setPreferredWidth(380);
        tblCTPhieu_main.getColumnModel().getColumn(2).setPreferredWidth(85);
        tblCTPhieu_main.getColumnModel().getColumn(3).setPreferredWidth(84);
        tblCTPhieu_sub.getColumnModel().getColumn(0).setPreferredWidth(15);
        tblCTPhieu_sub.getColumnModel().getColumn(1).setPreferredWidth(487);
        tblCTPhieu_sub.getColumnModel().getColumn(2).setPreferredWidth(122);
        tblCTPhieu_sub.getColumnModel().getColumn(3).setPreferredWidth(120);

        // cài đặt bộ lọc cho bảng
        tblPhieu.getColumnModel().getColumn(5).setCellRenderer(new DateRenderer(dateFormat));
        tblPhieu.getColumnModel().getColumn(6).setCellRenderer(new DateRenderer(dateFormat));
        tblPhieu.getColumnModel().getColumn(7).setCellRenderer(new DateRenderer(dateFormat + "(hh:MM:ss)"));

        //giấu cột maCTP
        tblCTPhieu_main.getColumnModel().removeColumn(tblCTPhieu_main.getColumnModel().getColumn(4));
        tblCTPhieu_sub.getColumnModel().removeColumn(tblCTPhieu_sub.getColumnModel().getColumn(4));

        // Chỉnh độ rộng hàng trong bảng
        tblCTPhieu_sub.setRowHeight(25);
        tblCTPhieu_main.setRowHeight(25);
        tblPhieu.setRowHeight(25);

        // Thêm chức năng nhập cho bảng
        tblCTPhieu_main.getColumnModel().getColumn(2).setCellEditor(new SpinnerEditor(0.0, 0.0, 100000.0, 1.0));
        tblCTPhieu_main.getColumnModel().getColumn(3).setCellEditor(new SpinnerEditor(0.0, 0.0, 1000000000.0, 1000.0));
        tblCTPhieu_sub.getColumnModel().getColumn(2).setCellEditor(new SpinnerEditor(0.0, 0.0, 100000.0, 1.0));
        tblCTPhieu_sub.getColumnModel().getColumn(3).setCellEditor(new SpinnerEditor(0.0, 0.0, 1000000000.0, 1000.0));
    }

    // Đổ combobox tìm kiếm chi tiết phiếu
    private void fillToComboBoxTimKiemCTPhieu() {
        DefaultComboBoxModel model = (DefaultComboBoxModel) cboTimKiemCT.getModel();
        model.removeAllElements();
        for (int i = 0; i < tblCTPhieu_sub.getColumnCount(); i++) {
            model.addElement(tblCTPhieu_sub.getColumnName(i));
        }
    }

    // Lọc bảng theo từ khoá chi tiết phiếu
    private void searchCTPhieu() {
        TableRowSorter<TableModel> sorterCTPhieu = new TableRowSorter<TableModel>(modelCTPhieu);
        tblCTPhieu_sub.setRowSorter(sorterCTPhieu);

        int columnFilter = cboTimKiemCT.getSelectedIndex();
        String keyword = txtTimKiemCTPhieu.getText().toLowerCase();
        
        sorterCTPhieu.setStringConverter(new TableStringConverter() {
            @Override
            public String toString(TableModel model, int row, int column) {
                return model.getValueAt(row, column).toString().toLowerCase();
            }
        });

        RowFilter<TableModel, Object> rf = null;
        try {
            rf = RowFilter.regexFilter(keyword.toLowerCase(), columnFilter);
        } catch (Exception e) {
            return;
        }
        sorterCTPhieu.setRowFilter(rf);
    }

    // Đổ combobox tìm kiếm phiếu
    private void fillToComboBoxTimKiemPhieu() {
        DefaultComboBoxModel model = (DefaultComboBoxModel) cboTimKiemPhieu.getModel();
        model.removeAllElements();
        for (int i = 0; i < tblPhieu.getColumnCount(); i++) {
            model.addElement(tblPhieu.getColumnName(i));
        }
    }

    // Lọc bảng theo từ khoá phiếu
    private void searchPhieu() {
        TableRowSorter<TableModel> sorterCTPhieu = new TableRowSorter<TableModel>(modelPhieu);
        tblPhieu.setRowSorter(sorterCTPhieu);

        int columnFilter = cboTimKiemPhieu.getSelectedIndex();
        String keyword = txtTimKiemPhieu.getText();

        sorterCTPhieu.setStringConverter(new TableStringConverter() {
            @Override
            public String toString(TableModel model, int row, int column) {
                return model.getValueAt(row, column).toString().toLowerCase();
            }
        });

        RowFilter<TableModel, Object> rf = null;
        try {
            rf = RowFilter.regexFilter(keyword.toLowerCase(), columnFilter);
            //rf = new RowFilter<TableModel, Object>(){
            //    @Override
            //    public boolean include(RowFilter.Entry<? extends TableModel, ? extends Object> entry) {
            //        
            //    }
            //}
        } catch (Exception e) {
            return;
        }
        sorterCTPhieu.setRowFilter(rf);
    }

    // Tạo mã QR chứa mã phiếu
    private void createQRCode() {
        if (rowPhieu < 0) {
            MsgBox.alert(this, "Chưa chọn chi tiết phiếu!");
        } else {
            Phieu phieu = (Phieu) this.modelPhieu.getValueAt(rowPhieu, 8);
            try {
                BufferedImage bi = QRCode.generateQRCodeImage(String.valueOf(phieu.getMaPhieu()));
                lblQRCodeImage.setIcon(new ImageIcon(bi));
                QRCodeDialog.setVisible(true);
            } catch (WriterException ex) {
                ex.printStackTrace();
            }
        }
    }

    // Hiển thị phiếu đầu danh sách
    private void first() {
        this.rowPhieu = 0;
        this.edit();
    }

    // Hiển thị phiếu kế trước
    private void prev() {
        if (this.rowPhieu > 0) {
            this.rowPhieu--;
            this.edit();
        }
    }

    // Hiển thị phiếu kế tiếp
    private void next() {
        if (this.rowPhieu < (tblPhieu.getRowCount() - 1)) {
            this.rowPhieu++;
            this.edit();
        }
    }

    // Hiển thị phiếu cuối danh sách
    private void last() {
        this.rowPhieu = tblPhieu.getRowCount() - 1;
        this.edit();
    }

    private void edit() {
        delCTP.clear();

        Phieu phieu = (Phieu) this.modelPhieu.getValueAt(rowPhieu, 8);

        this.setFormPhieu(phieu);
        tabs.setSelectedIndex(0);
        cboTimKiemCT.setSelectedIndex(0);
        txtTimKiemCTPhieu.setText("");

        isUpdate = true;
        this.updateStatus();
    }
}
